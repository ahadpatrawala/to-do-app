{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","TodoItem.js","todosData.js","App1.js","index.js"],"names":["TodoForm","state","text","handleSubmit","e","preventDefault","props","onSubmit","id","shortid","generate","complete","setState","handleChange","target","name","value","this","className","type","onChange","placeholder","onClick","style","textAlign","React","Component","completedStyle","fontStyle","color","textDecoration","toggleComplete","checked","todo","completed","onDelete","TodoList","todos","toggleAllComplete","todoToShow","addTodo","updateTodoToShow","s","handleDeleteTodo","filter","removeAllTodosThatAreComplete","handleAllComplete","map","prevState","Todo","key","length","some","TodoItem","item","todosData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.473ce058.chunk.js","sourcesContent":["import React from \"react\"\r\nimport shortid from 'shortid'\r\n\r\n\r\n  class TodoForm extends React.Component {\r\n      \r\n    state = {\r\n        text: ''\r\n      };\r\n\r\n    handleSubmit=(e)=> {\r\n      e.preventDefault(); //so it does not refresh\r\n      this.props.onSubmit({\r\n        id:shortid.generate(),\r\n        text: this.state.text,\r\n        complete: false\r\n      });\r\n      this.setState({\r\n        text:''\r\n      });\r\n    };\r\n\r\n\r\n    handleChange=(e)=> {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    };\r\n\r\n    render() {\r\n      //const items = this.state.toDoList.map(i=><li>{i}</li>);\r\n      return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            className = 'todo-input'\r\n            type=\"text\"\r\n            name=\"text\" \r\n            value={this.state.text} \r\n            onChange={this.handleChange} \r\n            placeholder=\"Enter to-do items here\"/>\r\n          <button className=\"todo-button\" type=\"submit\" onClick={this.handleSubmit}>\r\n            <i className=\"fas fa-plus-square\"></i>\r\n          </button>\r\n        </form>\r\n        <h1 style={{textAlign:\"center\"}}>My To Do List:</h1>\r\n      </div>\r\n      );\r\n    }\r\n  };\r\n  \r\n  export default TodoForm","import React from 'react'\r\n\r\nconst completedStyle ={\r\n    fontStyle: \"italics\",\r\n    color: \"red\",\r\n    textDecoration:\"line-through\"\r\n}\r\n\r\nexport default props => (\r\n    <div className=\"todo-item\" onClick={props.toggleComplete}>\r\n    <input type=\"checkbox\" checked={props.todo.completed} onChange={() => props.handleChange(props.todo.id)}/>\r\n    <p style={props.todo.completed? completedStyle : null}>{props.todo.text}</p>\r\n    <button className=\"trash-btn\" onClick={props.onDelete}><i className=\"fas fa-trash\"></i></button>\r\n    </div>\r\n);","import React from 'react'\r\nimport TodoForm from \"./TodoForm\"\r\nimport Todo from \"./Todo\"\r\n\r\nclass TodoList extends React.Component{\r\n\r\nstate = {\r\n    todos:[],\r\n    toggleAllComplete:true,\r\n    todoToShow:'all'\r\n};\r\n\r\naddTodo=(todo) =>{\r\n    this.setState({\r\n        todos:[todo,...this.state.todos]\r\n    });\r\n}\r\n\r\n/*toggleComplete=(id)=>{\r\nthis.setState({\r\n    todos:this.state.todos.map(todo =>{\r\n        if(todo.id === id){\r\n            return  { \r\n                ...todo,\r\n                complete: !todo.complete\r\n            };\r\n        }\r\n        else{\r\n            return todo\r\n        }\r\n    })\r\n})\r\n}*/\r\n\r\nupdateTodoToShow = (s) => {\r\n    this.setState ({\r\n        todoToShow: s\r\n    })\r\n}\r\n\r\nhandleDeleteTodo = (id) =>{\r\n    this.setState({\r\n        todos: this.state.todos.filter(todo=>todo.id!==id)\r\n    })\r\n}\r\n\r\nremoveAllTodosThatAreComplete =(id) =>{\r\n    this.setState({\r\n        todos: this.state.todos.filter(todo=>!todo.completed)\r\n    })\r\n}\r\n\r\nhandleAllComplete=()=>{\r\n    this.setState({\r\n        todos:this.state.todos.map(todo=>({\r\n            ...todo,\r\n            completed:this.state.toggleAllComplete\r\n        })),\r\n        toggleAllComplete: !this.state.toggleAllComplete\r\n    })\r\n}\r\n\r\nhandleChange = (id) =>{\r\n    this.setState(prevState => {\r\n        const updatedTodos = prevState.todos.map(todo =>{\r\n            if (todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        })\r\n        return {\r\n            todos: updatedTodos\r\n        }\r\n    })\r\n}\r\n\r\n\r\nrender(){\r\n\r\n    let todos=[];\r\n\r\n    if (this.state.todoToShow === \"all\"){\r\n        todos = this.state.todos;\r\n    }\r\n    else if(this.state.todoToShow === \"active\"){\r\n        todos = this.state.todos.filter(todo=>!todo.completed);\r\n    }\r\n    else if(this.state.todoToShow === \"complete\"){\r\n        todos = this.state.todos.filter(todo=>todo.completed);\r\n    }\r\n\r\n    return(\r\n        <div className=\"todo-list\">\r\n            <TodoForm className=\"todo-list\" onSubmit={this.addTodo}/>\r\n            {todos.map(todo =>(\r\n            <Todo key={todo.id} \r\n            onDelete={()=> this.handleDeleteTodo(todo.id)}\r\n            todo={todo}\r\n            handleChange={this.handleChange}\r\n            />\r\n            ))}\r\n            <div>\r\n                Todo left: {this.state.todos.filter(todo =>!todo.completed).length}\r\n            </div>\r\n            <div>\r\n                Todo completed: {this.state.todos.filter(todo =>todo.completed).length}\r\n            </div>\r\n            <div> \r\n                <button  onClick={()=>this.updateTodoToShow(\"all\")}>All</button>\r\n                <button  onClick={()=>this.updateTodoToShow(\"active\")}>Active</button>\r\n                <button onClick={()=>this.updateTodoToShow(\"complete\")}>Complete</button>\r\n            </div>\r\n          {this.state.todos.some(todo => todo.completed)? ( \r\n          <div className=\"toggle\">\r\n                <button onClick={this.removeAllTodosThatAreComplete}>\r\n                    Remove All Complete Todos\r\n                </button>\r\n            </div>) : null}\r\n            <div className=\"toggle\"> \r\n                <button  onClick={this.handleAllComplete}>\r\n                    Toggle All Complete: {`${this.state.toggleAllComplete}`}\r\n                </button>\r\n            </div>\r\n        </div> \r\n    );\r\n}\r\n}\r\n\r\nexport default TodoList","import React from \"react\"\r\n\r\n\r\nfunction TodoItem(props) {\r\n\r\n    const completedStyle ={\r\n        fontStyle: \"italics\",\r\n        color: \"red\",\r\n        textDecoration:\"line-through\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <input type=\"checkbox\" checked={props.item.completed} onChange={() => props.handleChange(props.item.id)}/>\r\n            <p style={props.item.completed? completedStyle : null}>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    },\r\n    {\r\n        id:6,\r\n        text:\"yo\",\r\n        completed: true\r\n    }\r\n]\r\n\r\nexport default todosData","import React from \"react\"\r\nimport TodoItem from \"./TodoItem\"\r\nimport todosData from \"./todosData\"\r\nimport TodoList from \"./TodoList\"\r\n\r\nclass App extends React.Component {\r\n\r\nconstructor(){\r\n    super()\r\n    this.state ={\r\n        todos : todosData,\r\n        toggleAllComplete:true\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n}\r\n\r\nhandleChange(id){\r\n    this.setState(prevState => {\r\n        const updatedTodos = prevState.todos.map(todo =>{\r\n            if (todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        })\r\n        return {\r\n            todos: updatedTodos\r\n        }\r\n    })\r\n}\r\n\r\nrender(){\r\n    //const todoItems = todosData.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\r\n    return (\r\n        <div>\r\n        <div className=\"todo-list\">\r\n        {TodoItem}\r\n        </div>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TodoList from \"./TodoList\"\r\n\r\nimport App1 from \"./App1\"\r\n\r\nReactDOM.render(<TodoList />, document.getElementById(\"root\"))"],"sourceRoot":""}